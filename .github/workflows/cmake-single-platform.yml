# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.4
      with:
         boost_version: 1.73.0
         # boost_install_dir: C:\some_directory
         # toolset: msvc

    - uses: actions/checkout@v3
      with:
        path: 'fritzing-app'
      
    - uses: actions/checkout@v3
      with:
        repository: 'fritzing/fritzing-parts'
        path: 'fritzing-parts'

    - uses: actions/checkout@v3
      with:
        repository: 'libgit2/libgit2'
        path: 'libgit2'

    - name: Build libgit2
      run: |
        mkdir libgit2\build
        cd libgit2\build
        cmake -D BUILD_SHARED_LIBS=OFF ..
        cmake --build . -- 
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Find file
      run: |
        cd ${{github.workspace}}
        gci -recurse -filter "phoenix.pro"
        gci -recurse -filter "Build"

    - name: Build
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        qmake ../phoenix.pro
        make -j16

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cd tests; ctest -C ${{env.BUILD_TYPE}}

